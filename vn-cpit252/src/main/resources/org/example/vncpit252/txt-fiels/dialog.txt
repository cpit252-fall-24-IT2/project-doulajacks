What's up programmer and welcome to the Singleton tutorial! We are going to explain one of the simplest yet one of the most used design patterns out there: The Singleton Pattern. The singleton is a creational design pattern   this pattern ensures that only  one instance of its kind exists  and provides a single point of access to  it from any other part of our application|As a real-world analogy take the  government of a country or its president,  you see a given country can have only one  official government or one official president  regardless of the individuals who form  this government or the person that   is currently the president of this country, so the title "the government or the president   of X" is a global identifier it is a global point of access   used to represent or reference the president  or the individuals in charge of this country.|Singletons represent exactly the same idea, just like global variables they let you access   your object from anywhere in your application but on top of that, they encapsulate the   attributes of this object in one single class and guarantee that only one instance of this class   will be available at any point in time but why would anyone want to control   how many instances a class has?| Well think of a database instance,  only one instance of a database is required and  should be used by all the parts of our application  So instead of creating a new instance  every time we need to query our database  we create a singleton database instance and reuse  this same instance every time we access our tables  by doing this we didn't only guarantee a  faster access and retrieval of the instance  but we also reduced the possibility  of encountering an error or exception   while creating these several instances.  Now let's go ahead and try to  implement the Singleton class together.|The first thing we need to do is create a  private static field inside our singleton,  this field will store the singleton instance under this instance you can go ahead and add   the attributes of your Singleton class in case of a database these attributes   can be the username and password needed  to connect for example or anything else|Now what we need to do is add a constructor  to create an object based on this class  make sure that the access level of  this constructor is set to private  inside this constructor we can go ahead and  initialize all the attributes of our object  in our case we only have one the "data" field.|This constructor was made private because we   only need access to it using a public static  method created inside the singleton class  usually this method is named getInstance() to  refer to the same single instance it returns  so this method should return an  instance of the Singleton class  the instance we declared at the  beginning of our implementation  but how do we guarantee that the same  instance is returned every single time? | Well the created instance is wrapped inside an   if-statement that checks if the static  instance of our singleton is null or not  and only if it is we proceed by creating a new  instance of it using our private constructor  however if it isn't we return the same instance  already stored inside our Singleton class.|So to recap we can say that the Singleton Pattern  should be used when a class must have a single   instance available to all its clients as this pattern disables all other means   of creating objects of a class except  for the special static creation method  This method either creates a new object or returns  the existing one if it has already been created.|So that's it for this tutorial, I hope it was helpful, don’t forget to take the quiz to get your badge!|Welcome back programmer. Are you ready to learn the prototype design pattern?  First what is the prototype design pattern. Prototype is a creational design pattern that lets you copy existing objects without making your code dependent on their classes.|Say you have an object, and you want to create an exact copy of it. How would you do it? First, you have to create a new object of the same class. Then you have to go through all the fields of the original object and copy their values over to the new object. | But there’s a catch. Not all objects can be copied that way because some of the object’s fields may be private and not visible from outside of the object itself. There’s one more problem with the direct approach. Since you have to know the object’s class to create a duplicate, your code becomes dependent on that class. If the extra dependency doesn’t scare you, there’s another catch. Sometimes you only know the interface that the object follows, but not its concrete class, when, for example, a parameter in a method accepts any objects that follow some interface.|So what should you do? You should implement the cloneable interface in you class while overriding the clone method. And making a new constructer that takes the instance you want you clone and Carrie over all of the field values of the old object into the new one.|Good job keeping up till here now you have a brief knowledge about the prototype design pattern you can check the resources we provide for more explanation. Also don’t forget to take the quiz to receive your badge.|Welcome back programmer. Are you ready to learn the Adapter design pattern?  Adapter is a structural design pattern that allows objects with incompatible interfaces to collaborate.|So what dose this design pattern solve. Imagine that you’re creating a stock market monitoring app. The app downloads the stock data from multiple sources in XML format and then displays nice-looking charts and diagrams for the user. At some point, you decide to improve the app by integrating a smart 3rd-party analytics library. But there’s a catch: the analytics library only works with data in JSON format. You could change the library to work with XML. However, this might break some existing code that relies on the library. And worse, you might not have access to the library’s source code in the first place, making this approach impossible.| don’t panic! And learn this, You should create an adapter. This is a special object that converts the interface of one object so that another object can understand it.An adapter wraps one of the objects to hide the complexity of conversion happening behind the scenes. The wrapped object isn’t even aware of the adapter. For example, you can wrap an object that operates in meters and kilometers with an adapter that converts all of the data to imperial units such as feet and miles.|Adapters can not only convert data into various formats but can also help objects with different interfaces collaborate. Here’s how it works: First  The adapter gets an interface, compatible with one of the existing objects. Secondly using this interface, the existing object can safely call the adapter’s methods. Thirdly Upon receiving a call, the adapter passes the request to the second object, but in a format and order that the second object expects.| Real-World Analogy: When you travel from the US to Europe for the first time, you may get a surprise when trying to charge your laptop. The power plug and sockets standards are different in different countries. That’s why your US plug won’t fit a German socket. The problem can be solved by using a power plug adapter that has the American-style socket and the European-style plug.|Good job keeping up to here if you want too learn more about the adapter design pattern go take a lock on the resources we provide and then take the quiz for you badge good luck programmer.|Welcome back programmer. Are you ready to learn the Builder design pattern? The Builder is a creational design pattern that lets you construct complex objects step by step. The pattern allows you to produce different types and representations of an object using the same construction code.| Imagen that you and your friend went to buy ice cream you place an order chocolate cone ice cream without sprinkles and caramel syrup, while your friend orders a caramel  in a cup with sprinkles. We can see that the mandatory things you need to have 2 order is type of ice cram and how its served (cup or cone) while you can chose to add syrup or sprinkle’s or not for the adds.| So we handle this problem using  The Builder pattern. It suggests that you extract the object construction code out of its own class and move it to separate objects called builders. The Builder pattern lets you construct complex objects step by step. The Builder doesn’t allow other objects to access the product while it’s being built. The pattern organizes object construction into a set of steps (withSyurp, withSprinkles, etc.). To create an object, you execute a series of these steps on a builder object. The important part is that you don’t need to call all of the steps. You can call only those steps that are necessary for producing a particular configuration of an object.|Some times you have multiple choices to order from the regular ice cream one or the ice cream tower that needs more than one type of ice cream an so on. In this case, you can create several different builder classes that implement the same set of building steps, but in a different manner. Then you can use these builders in the construction process| Good job keeping up to here if you want too learn more about the Builder design pattern go take a lock on the resources we provide and then take the quiz for you badge good luck programmer.